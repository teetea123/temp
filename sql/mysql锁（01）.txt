mysql锁（01）.txt

========
1，

《002，MySQL 加锁处理分析（何登成）（1）.txt》
RC（读已提交）级别
RR（可重复读）级别

====
11，简单的sql语句

SQL1：
select * from t1 where id = 10;

SQL2：
delete from t1 where id = 10;

-1，id是主键时，
RC，RR级别相同：
此SQL只需要在id=10这条记录上加X锁即可。

-2，id是唯一键，name是主键。
RC，RR级别相同：
一个对应于id unique索引上的id = 10的记录，
另一把锁对应于主键索引（聚簇索引）上的[name=’d’,id=10]的记录。

-3，id是普通索引（非唯一索引），

RC级别：
那么对应的所有满足SQL查询条件的记录，都会被加锁。
同时，这些记录在主键索引上的记录，也会被加锁。

RR级别：
多了GAP锁。
增加3把GAP锁，将可能插入满足条件记录的3个GAP给锁上，
保证后续的Insert不能插入新的id=10的记录。

首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，加GAP上的GAP锁，
然后加主键聚簇索引上的记录X锁，然后返回；
然后读取下一条，重复进行。
直至进行到第一条不满足条件的记录[11,f]，
此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。

-4，若id列上没有索引，

RC级别：
SQL会走聚簇索引的“全扫描”进行过滤，
由于过滤是由MySQL Server层面进行的，
因此每条记录，无论是否满足条件，都会被加上X锁。

但是，为了效率考量，MySQL做了优化，
对于不满足条件的记录，会在判断后放锁，
最终持有的，是满足条件的记录上的锁，

但是不满足条件的记录上的加锁/放锁动作不会省略。
同时，优化也违背了2PL的约束。

RR级别：
全扫描。
首先，聚簇索引上的所有记录，都被加上了X锁。
其次，聚簇索引每条记录间的间隙(GAP)，也同时被加上了GAP锁。

在这种情况下，这个表上，
除了不加锁的快照读，
其他任何加锁的并发SQL，均不能执行，不能更新，不能删除，不能插入，
全表被锁死。

semi-consistent read开启的情况下，
对于不满足查询条件的记录，MySQL会提前放锁。
针对上面的这个用例，就是除了记录[d,10]，[g,10]之外，
所有的记录锁都会被释放，同时不加GAP锁。

但是semi-consistent read本身也会带来其他问题，
不建议使用。

====
12，复杂的SQL语句

在Repeatable Read隔离级别下，针对一个复杂的SQL，首先需要提取其where条件。
Index Key确定的范围，需要加上GAP锁；
Index Filter过滤条件，视MySQL版本是否支持ICP（Index Condition Pushdown），
若支持ICP，则不满足Index Filter的记录，不加X锁，
否则需要X锁；
Table Filter过滤条件，无论是否满足，都需要加X锁。

====
13，

了解数据库的一些基本理论知识：
数据的存储格式 (堆组织表 vs 聚簇索引表)；
并发控制协议 (MVCC vs Lock-Based CC)；
Two-Phase Locking；
数据库的隔离级别定义 (Isolation Level)；

了解SQL本身的执行计划
(主键扫描 vs 唯一键扫描 vs 范围扫描 vs 全表扫描)；

了解数据库本身的一些实现细节
(过滤条件提取；
Index Condition Pushdown；
Semi-Consistent Read)；

了解死锁产生的原因及分析的方法
(加锁顺序不一致；
分析每个SQL的加锁顺序)

========
2，gap锁

《001，mysql死锁问题分析（zhanlijun）.txt》

为了保证并发操作数据的正确性，数据库都会有事务隔离级别的概念：
1）未提交读（Read uncommitted）；
2）已提交读（Read committed（RC））；
3）可重复读（Repeatable read（RR））；
4）可串行化（Serializable）。
我们较常使用的是RC和RR。

如下图所示，事务A在第一次查询时得到1条记录，在第二次执行相同查询时却得到两条记录。
从事务A角度上看是见鬼了！
这就是幻读，RC级别下尽管加了行锁，但还是避免不了幻读。

为了解决幻读问题，innodb引入了gap锁。

在事务A执行：
update msg set message=‘订单’ where token=‘asd’;

innodb首先会和RC级别一样，给索引上的记录添加上X锁，
此外，还在非唯一索引’asd’与相邻两个索引的区间加上锁。

这样，当事务B在执行
insert into msg values (null,‘asd',’hello’); commit;
时，会首先检查这个区间是否被锁上，
如果被锁上，则不能立即执行，需要等待该gap锁被释放。
这样就能避免幻读问题。

========
3，“锁申请”队列

show engine innodb status\G

《003，一个最不可思议的MySQL死锁分析（何登成）.txt》

teetea理解：
事务2持有 X lock not gap，等待 next key锁（被事务1的“锁申请”阻塞），
事务1等待 next key锁（被事务2的第一个锁阻塞）。

《记录一次 Mysql 死锁排查过程.txt》

teetea理解：
事务1因为事务2的第一个语句的X锁，导致申请X锁放到队列。
事务2的第二个语句的S锁，因为事务1的X锁在等待，所以也放到队列等待。
互相等待，形成死锁。


