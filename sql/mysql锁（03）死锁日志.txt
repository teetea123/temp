mysql锁（03）死锁日志.txt

========
mysql -h 127.0.0.1 -u root -p -P 3306 -D xxxdb -e "show engine innodb status"  > /tmp/dblock.txt

查看隔离级别：

select @@global.tx_isolation, @@tx_isolation;

+-----------------------+-----------------+
| @@global.tx_isolation | @@tx_isolation  |
+-----------------------+-----------------+
| REPEATABLE-READ       | REPEATABLE-READ |
+-----------------------+-----------------+

========
*** (1) TRANSACTION
*** (2) TRANSACTION

各个事务的信息。

*** WE ROLLBACK TRANSACTION(1)

回滚了哪个事务。

========
Mysql thread id 2096

线程id，即连接id。

query id 1485879

查询id。

trx id 930F3

事务id。

========
*** (1) WAITING FOR THIS LOCK TO BE GRANTED;

等待哪个锁。

*** (2) HLODS THE LOCK(S):

持有哪些锁（后面的 S 只是表示复数）。

index 'uniq_a_b_c' of table 'dltst'.'dltask'
index `PRIMARY` of table `ginmon_db`.`accounts`

锁的是哪个表的哪个索引。
锁的是主键。

lock_mode X locks rec but no gap

lock_mode X waiting

lock_mode X locks rec but not gap waiting

lock_mode X locks gap before rec insert intention waiting

排它锁。
间隙锁。
意图锁。

========
========
《丁奇《MySQL实战45讲》30，答疑文章（二）：用动态的观点看加锁.html》

注意，非唯一索引上包含主键的值。

====
《丁奇《MySQL实战45讲》30，答疑文章（二）：用动态的观点看加锁：图 3 死锁现场.png》

这个结果分成三部分：

(1) TRANSACTION，是第一个事务的信息；
(2) TRANSACTION，是第二个事务的信息；
WE ROLL BACK TRANSACTION (1)，是最终的处理结果，表示回滚了第一个事务。
第一个事务的信息中：

WAITING FOR THIS LOCK TO BE GRANTED，
表示的是这个事务在等待的锁信息；
index c of table `test`.`t`，
说明在等的是表 t 的索引 c 上面的锁；
lock mode S waiting
表示这个语句要自己加一个读锁，当前的状态是等待中；
Record lock 说明这是一个记录锁；
n_fields 2
表示这个记录是两列，也就是字段 c 和主键字段 id；
0: len 4; hex 0000000a; asc ;;
是第一个字段，也就是 c。
值是十六进制 a，也就是 10；
1: len 4; hex 0000000a; asc ;;
是第二个字段，也就是主键 id，值也是 10；
这两行里面的 asc 表示的是，
接下来要打印出值里面的“可打印字符”，
但 10 不是可打印字符，因此就显示空格。
第一个事务信息就只显示出了等锁的状态，
在等待 (c=10,id=10) 这一行的锁。
当然你是知道的，既然出现死锁了，
就表示这个事务也占有别的锁，但是没有显示出来。
别着急，我们从第二个事务的信息中推导出来。
第二个事务显示的信息要多一些：

“ HOLDS THE LOCK(S)”用来显示这个事务持有哪些锁；
index c of table `test`.`t`
表示锁是在表 t 的索引 c 上；
hex 0000000a 和 hex 00000014
表示这个事务持有 c=10 和 c=20 这两个记录锁；
WAITING FOR THIS LOCK TO BE GRANTED，
表示在等 (c=5,id=5) 这个记录锁。
从上面这些信息中，我们就知道：

“lock in share mode”的这条语句，
持有 c=5 的记录锁，在等 c=10 的锁；

“for update”这个语句，
持有 c=20 和 c=10 的记录锁，在等 c=5 的记录锁。

因此导致了死锁。
这里，我们可以得到两个结论：

由于锁是一个个加的，要避免死锁，
对同一组资源，要按照尽量相同的顺序访问；

在发生死锁的时刻，for update 这条语句占有的资源更多，回滚成本更大，
所以 InnoDB 选择了回滚成本更小的 lock in share mode 语句，来回滚。

====
《丁奇《MySQL实战45讲》30，答疑文章（二）：用动态的观点看加锁：图 5 锁等待信息.png》

我们来看几个关键信息。

index PRIMARY of table `test`.`t` ，
表示这个语句被锁住是因为表 t 主键上的某个锁。

lock_mode X locks gap before rec insert intention waiting
这里有几个信息：

insert intention 表示当前线程准备插入一个记录，这是一个插入意向锁。
为了便于理解，你可以认为它就是这个插入动作本身。
gap before rec 表示这是一个间隙锁，而不是记录锁。
那么这个 gap 是在哪个记录之前的呢？
接下来的 0~4 这 5 行的内容就是这个记录的信息。

n_fields 5
也表示了，这一个记录有 5 列：

0: len 4; hex 0000000f; asc ;;
第一列是主键 id 字段，
十六进制 f 就是 id=15。
所以，这时我们就知道了，这个间隙就是 id=15 之前的，
因为 id=10 已经不存在了，它表示的就是 (5,15)。
1: len 6; hex 000000000513; asc ;;
第二列是长度为 6 字节的事务 id，
表示最后修改这一行的是 trx id 为 1299 的事务。
2: len 7; hex b0000001250134; asc % 4;;
第三列长度为 7 字节的回滚段信息。
可以看到，这里的 acs 后面有显示内容 (% 和 4)，
这是因为刚好这个字节是可打印字符。
后面两列是 c 和 d 的值，都是 15。
因此，我们就知道了，
由于 delete 操作把 id=10 这一行删掉了，
原来的两个间隙 (5,10)、(10,15）变成了一个 (5,15)。

说到这里，你可以联合起来再思考一下这两个现象之间的关联：

session A 执行完 select 语句后，
什么都没做，
但它加锁的范围突然“变大”了；

第 21 篇文章的课后思考题，
当我们执行
select * from t where c>=15 and c<=20 order by c desc lock in share mode;
向左扫描到 c=10 的时候，要把 (5, 10] 锁起来。

也就是说，所谓“间隙”，
其实根本就是由“这个间隙右边的那个记录”定义的。

