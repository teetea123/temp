mysql锁（04）加锁分析（重要）.txt

========
《20，幻读是什么，幻读有什么问题？（幻行，间隙锁）.html》

跟间隙锁存在冲突关系的，
是“往这个间隙中插入一个记录”这个操作。
间隙锁之间都不存在冲突关系。（teetea：注意）

这里 session B 并不会被堵住。
因为表 t 里并没有 c=7 这个记录，因此 session A 加的是间隙锁 (5,10)。
而 session B 也是在这个间隙加的间隙锁。
它们有共同的目标，即：保护这个间隙，不允许插入值。
但，它们之间是不冲突的。

“间隙锁”和“行锁”合称 next-key lock，
每个 next-key lock 是前开后闭区间。

也就是说，我们的表 t 初始化以后，
如果用 select * from t for update 要把整个表所有记录锁起来，
就形成了 7 个 next-key lock，
分别是 (-∞,0]、(0,5]、(5,10]、(10,15]、(15,20]、(20, 25]、(25, +suprenum]。

备注：这篇文章中，如果没有特别说明，我们
把“间隙锁”记为开区间，
把 next-key lock 记为前开后闭区间。

你可能会问说，这个 suprenum 从哪儿来的呢？

这是因为 +∞ 是开区间。
实现上，InnoDB 给每个索引加了一个不存在的最大值 suprenum，
这样才符合我们前面说的“都是前开后闭区间”。

====
任意锁住一行，
如果这一行不存在的话就插入，
如果存在这一行就更新它的数据，
代码如下：

begin;
select * from t where id=N for update;

/* 如果行不存在 */
insert into t values(N,N,N);
/* 如果行存在 */
update t set d=N set id=N;

commit;

可能你会说，这个不是 insert ... on duplicate key update 就能解决吗？
但其实在有多个唯一键的时候，
这个方法是不能满足这位提问同学的需求的。
至于为什么，我会在后面的文章中再展开说明。

现在，我们就只讨论这个逻辑。

这个同学碰到的现象是，
这个逻辑一旦有并发，就会碰到死锁。

session A 执行 select ... for update 语句，
由于 id=9 这一行并不存在，
因此会加上间隙锁 (5,10);

session B 执行 select ... for update 语句，
同样会加上间隙锁 (5,10)，
间隙锁之间不会冲突，
因此这个语句可以执行成功；

session B 试图插入一行 (9,9,9)，
被 session A 的间隙锁挡住了，只好进入等待；

session A 试图插入一行 (9,9,9)，
被 session B 的间隙锁挡住了。

至此，两个 session 进入互相等待状态，形成死锁。
当然，InnoDB 的死锁检测马上就发现了这对死锁关系，
让 session A 的 insert 语句报错返回了。

========
《21，为什么我只改一行的语句，锁这么多？.html》

MySQL 后面的版本可能会改变加锁策略，
所以这个规则只限于截止到现在的最新版本，
即 5.x 系列 <=5.7.24，
8.0 系列 <=8.0.13。

因为“间隙锁”在“可重复读”隔离级别下才有效，
所以本篇文章接下来的描述，若没有特殊说明，
默认是“可重复读”隔离级别。

我总结的加锁规则里面，
包含了两个“原则”、两个“优化”和一个“bug”。

原则 1：加锁的基本单位是 next-key lock。
希望你还记得，next-key lock 是
前开后闭区间。

原则 2：查找过程中访问到的对象才会加锁。

优化 1：索引上的等值查询，给唯一索引加锁的时候，
next-key lock 退化为行锁。

优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，
next-key lock 退化为间隙锁。

一个 bug：唯一索引上的范围查询
会访问到不满足条件的第一个值为止。

next-key lock 实际上是间隙锁和行锁加起来的结果。

========
小结

我们上面的所有案例都是在
可重复读隔离级别 (repeatable-read)
下验证的。
同时，可重复读隔离级别遵守两阶段锁协议，
所有加锁的资源，都是在事务提交或者回滚的时候才释放的。

在最后的案例中，你可以清楚地知道 next-key lock
实际上是由间隙锁加行锁实现的。
如果切换到
读提交隔离级别 (read-committed) 的话，就好理解了，
过程中去掉间隙锁的部分，也就是只剩下行锁的部分。

其实读提交隔离级别
在“外键”场景下还是有间隙锁，
相对比较复杂，我们今天先不展开。

另外，在读提交隔离级别下还有一个优化，即：
语句执行过程中加上的行锁，在语句执行完成后，
就要把“不满足条件的行”上的行锁直接释放了，不需要等到事务提交。

也就是说，读提交隔离级别下，锁的范围更小，锁的时间更短，
这也是不少业务都默认使用读提交隔离级别的原因。

========
CREATE TABLE `t` (
  `id` int(11) NOT NULL,
  `c` int(11) DEFAULT NULL,
  `d` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `c` (`c`)
) ENGINE=InnoDB;

insert into t
values
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

c 索引。

========
案例一：等值查询间隙锁

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
update t set d=d+1 where id=7;

根据原则 1，加锁单位是 next-key lock，
session A 加锁范围就是 (5,10]；

同时根据优化 2，这是一个等值查询 (id=7)，
而 id=10 不满足查询条件，
next-key lock 退化成间隙锁，
因此最终加锁的范围是 (5,10)。

session B:
insert into t values(8,8,8);
(blocked)

session C:
update t set d=d+1 where id=10;
(query ok)

========
案例二：非唯一索引等值锁

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
select id from t where c=5 lock in share mode;

根据原则 1，加锁单位是 next-key lock，
因此会给 (0,5] 加上 next-key lock。

要注意 c 是普通索引，
因此仅访问 c=5 这一条记录是不能马上停下来的，
需要向右遍历，查到 c=10 才放弃。
根据原则 2，访问到的都要加锁，
因此要给 (5,10] 加 next-key lock。

但是同时这个符合优化 2：等值判断，向右遍历，最后一个值不满足 c=5 这个等值条件，
因此退化成间隙锁 (5,10)。

根据原则 2 ，只有访问到的对象才会加锁，
这个查询使用覆盖索引，并不需要访问主键索引，
所以主键索引上没有加任何锁，
这就是为什么 session B 的 update 语句可以执行完成。

需要注意，在这个例子中，
lock in share mode 只锁覆盖索引，
但是如果是 for update 就不一样了。
执行 for update 时，系统会认为你接下来要更新数据，
因此会顺便给主键索引上满足条件的行加上行锁。

这个例子说明，
锁是加在索引上的；
同时，它给我们的指导是，
如果你要用 lock in share mode 来给行加读锁避免数据被更新的话，
就必须得绕过覆盖索引的优化，在查询字段中加入索引中不存在的字段。
比如，将 session A 的查询语句改成 select d from t where c=5 lock in share mode。

session B:
update t set d=d+1 where id=5;
(query ok)

session C:
insert into t values(7,7,7);
(blocked)

========
案例三：主键索引范围锁

对于我们这个表 t，下面这两条查询语句，加锁范围相同吗？

mysql> select * from t where id=10 for update;
mysql> select * from t where id>=10 and id<11 for update;
你可能会想，id 定义为 int 类型，这两个语句就是等价的吧？
其实，它们并不完全等价。

在逻辑上，这两条查语句肯定是等价的，
但是它们的加锁规则不太一样。

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
select * from t where id>=10 and id<11 for update;

开始执行的时候，要找到第一个 id=10 的行，
因此本该是 next-key lock(5,10]。
根据优化 1， 主键 id 上的等值条件，
退化成行锁，只加了 id=10 这一行的行锁。

范围查找就往后继续找，找到 id=15 这一行停下来，
因此需要加 next-key lock(10,15]。

所以，session A 这时候锁的范围就是主键索引上，
行锁 id=10 和 next-key lock(10,15]。

这里你需要注意一点，
首次 session A 定位查找 id=10 的行的时候，
是当做等值查询来判断的，
而向右扫描到 id=15 的时候，用的是范围查询判断。

session B:
insert into t values(8,8,8);
(query ok)
insert into t values(13,13,13);
(blocked)

session C:
update t set d=d+1 where id=15;
(blocked)

========
案例四：非唯一索引范围锁

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
select * from t where c>=10 and c<11 for update;

这次 session A 用字段 c 来判断，
加锁规则跟案例三唯一的不同是：
在第一次用 c=10 定位记录的时候，
索引 c 上加了 (5,10] 这个 next-key lock 后，
由于索引 c 是非唯一索引，没有优化规则，也就是说不会蜕变为行锁，
因此最终 sesion A 加的锁是，
索引 c 上的 (5,10] 和 (10,15]
这两个 next-key lock。

session B:
insert into t values(8,8,8);
(blocked)

session C:
update t set d=d+1 where c=15;
(blocked)

========
案例五：唯一索引范围锁 bug

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
select * from t where id>10 and id<=15 for update;

session B:
update t set d=d+1 where id=20;
(blocked)

session C:
insert into t values(16,16,16);
(blocked)

session A 是一个范围查询，按照原则 1 的话，
应该是索引 id 上只加 (10,15] 这个 next-key lock，
并且因为 id 是唯一键，
所以循环判断到 id=15 这一行就应该停止了。

但是实现上，InnoDB 会往前扫描到第一个不满足条件的行为止，也就是 id=20。
而且由于这是个范围扫描，
因此索引 id 上的 (15,20] 这个 next-key lock 也会被锁上。

所以你看到了，session B 要更新 id=20 这一行，是会被锁住的。
同样地，session C 要插入 id=16 的一行，也会被锁住。

照理说，这里锁住 id=20 这一行的行为，其实是没有必要的。
因为扫描到 id=15，就可以确定不用往后再找了。
但实现上还是这么做了，因此我认为这是个 bug。

========
案例六：非唯一索引上存在"等值"的例子

注意，非唯一索引上包含主键的值。

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);
(30,10,30);

session A:
begin;
delete from t where c=10;

session A 在遍历的时候，先访问第一个 c=10 的记录。
同样地，根据原则 1，
这里加的是 (c=5,id=5) 到 (c=10,id=10) 这个 next-key lock。

然后，session A 向右查找，直到碰到 (c=15,id=15) 这一行，循环才结束。
根据优化 2，这是一个等值查询，向右查找到了不满足条件的行，
所以会退化成 (c=10,id=10) 到 (c=15,id=15) 的间隙锁。

《丁奇《MySQL实战45讲》21，为什么我只改一行的语句，锁这么多？图 8 delete 加锁效果示例.png》

session B:
insert into t values(12,12,12);
(blocked)

session C:
update t set d=d+1 where c=15;
(query ok)

========
案例七：limit 语句加锁

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);
(30,10,30);

session A:
begin;
delete from t where c=10 limit 2;

session B:
insert into t values(12,12,12);
(query ok)

这个例子里，session A 的 delete 语句加了 limit 2。
你知道表 t 里 c=10 的记录其实只有两条，
因此加不加 limit 2，删除的效果都是一样的，但是加锁的效果却不同。
可以看到，session B 的 insert 语句执行通过了，跟案例六的结果不同。

这是因为，案例七里的 delete 语句明确加了 limit 2 的限制，
因此在遍历到 (c=10, id=30) 这一行之后，
满足条件的语句已经有两条，
循环就结束了。

因此，索引 c 上的加锁范围就变成了从（c=5,id=5) 到（c=10,id=30) 这个前开后闭区间。

可以看到，(c=10,id=30）之后的这个间隙并没有在加锁范围里，
因此 insert 语句插入 c=12 是可以执行成功的。

《丁奇《MySQL实战45讲》21，为什么我只改一行的语句，锁这么多？图 10 带 limit 2 的加锁效果.png》

这个例子对我们实践的指导意义就是，
在删除数据的时候尽量加 limit。
这样不仅可以控制删除数据的条数，让操作更安全，
还可以减小加锁的范围。

========
案例八：一个死锁的例子

next-key lock 实际上是间隙锁和行锁加起来的结果。

已有的值：
(0,0,0),
(5,5,5),
(10,10,10),
(15,15,15),
(20,20,20),
(25,25,25);

session A:
begin;
select id from t where c=10 lock in share mode;

session B:
update t set d=d+1 where c=10;
(blocked)

session A:
insert into t values(8,8,8);

session B:
ERROR 1213(40001):
Deadlock found when trying to get lock;
try restarting transaction

现在，我们按时间顺序来分析一下为什么是这样的结果。

session A 启动事务后执行查询语句加 lock in share mode，
在索引 c 上加了 next-key lock(5,10] 和间隙锁 (10,15)；

session B 的 update 语句也要在索引 c 上加 next-key lock(5,10] ，进入锁等待；

然后 session A 要再插入 (8,8,8) 这一行，被 session B 的间隙锁锁住。
由于出现了死锁，InnoDB 让 session B 回滚。

你可能会问，session B 的 next-key lock 不是还没申请成功吗？

其实是这样的，session B 的“加 next-key lock(5,10] ”操作，
实际上分成了两步，
先是加 (5,10) 的间隙锁，加锁成功；
然后加 c=10 的行锁，这时候才被锁住的。

也就是说，我们在分析加锁规则的时候可以用 next-key lock 来分析。
但是要知道，具体执行的时候，是要分成间隙锁和行锁两段来执行的。

